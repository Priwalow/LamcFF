###Package for running evtgen and GSIM with python wrapper###
T. Bloomfield (tristan.bloomfield@student.unimelb.edu.au) 30/01/2015
Based on the mcproduzh package made by Y. Horii (in turn based on work of Y.
Ushiroda and A. Zupanc).

This package is used to generate Monte Carlo data using Evtgen and GSIM on
KEKCC. It makes use of a configuration file to store some parameters in order
to avoid the need to reenter information at each execution. The python scripts 
Signal_Evtgen.py and Signal_GSIM are used to generate MC data using Evtgen and
run GSIM for the MC data respectively. Please read the following sections for
how to setup and use this package.


--Setup Config File--

In order to make use of this package first run Setup.py and answer the prompts
to setup on the config file. Alternatively you may manually edit analysis.cfg.
You may set either absolute paths or paths relative to the directory
containing Signal_Evtgen.py and Signal_GSIM.py


--Config File Details--

The following information is stored in the config file:

Path for Evtgen output: For each execution of Signal_Evtgen, a
folder corresponing to the name of the decay folder will be created under this
directory and the evtgen output saved to it. This is also the directory that
Signal_GSIM will look for its input files in.

Path for GSIM output: For each execution of Signal_GSIM, a folder with the
same name as the input folder will be created under this directory and the
GSIM output saved to it.

Decay files directory: This is the directory that Signal_Evtgen will look for
the specified decay file in.

Luminosity file: This is the location of the file containing the luminosities
for each experiment that is used by Signal_Evtgen to determine the correct 
number of events to generate for each experiment. If this option is left as 
default the values for the Y4S experiments will be used. See below for setting
alternate files.

MC .conf file: This is the location of a file containing extra options needed
to configure BASF to run Evtgen for different energy levels. If this option is
left as
default it will be set for Y4S. See below for details if you wish to set an 
alternate file.


--Signal_Evtgen.py--

This script uses Evtgen to generate Monte Carlo data for a given decay file
using the parameters of the Belle experiments (For how to write a decay file see Evtgen manual). 
The generated MC data will contain the correct ratio between the parameters of
the different Belle experiments. 

Production will run on the KEKCC batch systems and will be split into multiple 
jobs based on the number of events per job (set by user). The MC data will be
saved in a folder coresponing to the name of the decay file under the Evtgen
output directory set in the config file. If such a folder already exists a
version number will be appended.

usage: Signal_Evtgen.py [options] DECAY_FILE TOT_EVTS JOB_EVTS

  options:
    -h, --help         show this help message and exit
    -i, --interactive  run the script in interactive mode (by default scripts
                       are submitted to KEK batch queues)
    -d, --debug        Debug test. Print script command line calls only, does
                       not actually run anything.

  Positional Arguments:
    DECAY_FILE    Name of the decay file you wish to generate MC with
    TOT_EVTS      Total number of events you wish to be generated
    JOB_EVTS      Number of events to generate per job

--Signal_GSIM.py--

This script runs GSIM over a set of MC data generated by the Signal_Evtgen
script. Backgrounds and detector setup will be automatically added for
different experiments.

The input folder should exists under the Evtgen output directory set in the
config file, and the output will be saved in a folder of the same name under
the GSIM output directory. If this output directory already exists, you will
be asked whether you wish to overwrite it.

Note: The MC data must be generated by either Signal_Evtgen in this package as
the file naming is used to determine the experiment number of each file. (Data
generated by the mcproduzh should work as well, but no guarantee is given).

usage: Signal_GSIM.py [options] EVTGEN_DIR

  options:
    -h, --help         show this help message and exit
    -i, --interactive  run the script in interactive mode (by default scripts
                       are submitted to KEK batch queues)
    -d, --debug        Debug test. Print script command line calls only, does
                       not actually run anything.

  Positional Arguments:
    EVTGEN_DIR    Directory containing the data to run GSIM over (relative to
                the Evtgen output directory set in the config). This will be
                the name of the decay file with a version number appended

--Luminosity File--

There are 4 luminosity files included in this package for various sets of runs: Y4S, Y5S, 
Y4S+Y5S, and a subset of Y4S. These are .txt files with the "nBB" prefix located in the
"core_scripts/mcproduzh/evtgen" subfolder. To write your own luminosity file
simply create a line seperated list of experiments, each line containing an
experiment number and luminosity seperated by tabs. See the included files for
examples.


--MC config file--

This package include evtgen basf files for Y4S and Y5S. These are located in
the "core_scripts/mcproduzh/evtgen" subfolder and have the file extension
.conf. If you need extra basf commands for running evtgen you may use your own
.conf file.



Note for users wishing to run this package on non-KEKCC computing systems: A
number of parameters specific to KEKCC are hardcoded in (eg. ADDBG path,
bashrc_general path). If you wish to run this package on a different computing
systems these will need editing.
